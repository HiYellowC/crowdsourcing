<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- credentialsMatcher -->
	<bean id="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="1" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>
	
	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.crowdsourcing.realm.MyRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	</bean>

	<!-- 自定义授权验证过滤器 -->
	<bean id="roleOrFilter" class="com.crowdsourcing.filter.MyRolesAuthorizationFilter"></bean>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/user/loginPage" />
		<property name="unauthorizedUrl" value="/unauthorized" />
		<property name="filters">
			<map>
				<entry key="roleOr" value-ref="roleOrFilter"></entry>
			</map>
		</property>
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/> 
			</util:map> </property> -->
		<property name="filterChainDefinitions">
			<value>
				/login=anon
				/user/info=authc
				/user/listPage=roleOr[admin, superAdmin]
				/user/list=roleOr[admin, superAdmin]
				/user/delete/*=roleOr[admin, superAdmin]
				/user/unlock/*=roleOr[admin, superAdmin]
				/user/lock/*=roleOr[admin, superAdmin]
				/user/permission/*=authc
				/image/task/t/*=authc
				/image/task*=authc
				/image/task/*=authc
				/image/listPage=roles[superAdmin]
				/image/list=roles[superAdmin]
				/image/zip=roles[superAdmin]
				/image/show*=authc
				/image/save*=roles[superAdmin]
				/teacher=perms["user:creat"]
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	

</beans>